generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Modelo para almacenar la información de los socios
model Socio {
  id                          Int      @id @default(autoincrement())
  nombre                      String
  email                       String   @unique
  telefono                    String?  @unique
  direccion                   String?
  contacto_adicional_nombre   String?
  contacto_adicional_telefono String?
  creado_en                   DateTime @default(now())

  // Relaciones
  reservas      Reserva[]
  tokens        Token[]
  amigos        Amigo[]        @relation("SocioAmigos")
  amigosInverso Amigo[]        @relation("SocioAmigosInverse") // Campo de relación opuesto
  grupos        UsuarioGrupo[]
}

// Modelo para almacenar la información de los eventos
model Evento {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String?
  fecha       DateTime
  ubicacion   String?
  url_externa String?
  creado_en   DateTime @default(now())

  // Relación con las reservas
  reservas Reserva[]
}

// Modelo para almacenar las reservas de los socios a los eventos
model Reserva {
  id           Int      @id @default(autoincrement())
  socio_id     Int
  evento_id    Int
  reservado_en DateTime @default(now())

  // Relaciones
  socio  Socio  @relation(fields: [socio_id], references: [id])
  evento Evento @relation(fields: [evento_id], references: [id])
  pago   Pago?

  // Índice único para evitar duplicados
  @@unique([socio_id, evento_id])
}

// Modelo para almacenar los pagos de las reservas
model Pago {
  id         Int       @id @default(autoincrement())
  reserva_id Int       @unique
  cantidad   Float // Cambiado de Decimal a Float
  estado     String    @default("no pagado")
  pagado_en  DateTime?
  creado_en  DateTime  @default(now())

  // Relación con las reservas
  reserva Reserva @relation(fields: [reserva_id], references: [id])
}

// Modelo para almacenar los tokens de autenticación de los socios
model Token {
  id        Int      @id @default(autoincrement())
  socio_id  Int
  token     String   @unique
  expira_en DateTime
  creado_en DateTime @default(now())

  // Relación con los socios
  socio Socio @relation(fields: [socio_id], references: [id])
}

// Modelo para almacenar las relaciones de amistad entre socios
model Amigo {
  id             Int      @id @default(autoincrement())
  socio_id       Int
  socio_amigo_id Int
  creado_en      DateTime @default(now())

  // Relaciones con los socios
  socio      Socio @relation("SocioAmigos", fields: [socio_id], references: [id])
  socioAmigo Socio @relation("SocioAmigosInverse", fields: [socio_amigo_id], references: [id])

  // Índice único para evitar duplicados
  @@unique([socio_id, socio_amigo_id])
}

// Modelo para almacenar la información de los grupos
model Grupo {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String?
  creado_en   DateTime @default(now())

  // Relación con los usuarios de los grupos
  usuarios UsuarioGrupo[]
}

// Modelo para almacenar la relación entre socios y grupos
model UsuarioGrupo {
  id       Int      @id @default(autoincrement())
  socio_id Int
  grupo_id Int
  unido_en DateTime @default(now())

  // Relaciones
  socio Socio @relation(fields: [socio_id], references: [id])
  grupo Grupo @relation(fields: [grupo_id], references: [id])

  // Índice único para evitar duplicados
  @@unique([socio_id, grupo_id])
}
